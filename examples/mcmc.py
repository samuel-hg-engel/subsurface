# Module imports
import subsurface

# Input parameters
N_iter=1000
threshold = 0.98
perturbation=0.05
output_frequency=1

voxel_size = [64,64,64]
N_seeds = 250

# Generate the reference voronoi object
voronoi_reference = subsurface.voronoi.Voronoi(voxel_size,N_seeds) # Optionally can specifiy the seeds

# Generate the voronoi matrix
voronoi_reference.generate_voronoi_matrix(weighted=False) # Seeds are autogenerated as they are cheap, matrix must be requested

# Create a list of perturbed voronoi objects
voronoi_objects = subsurface.markovchain.voronoi_markov_chain(N_iter,threshold,perturbation,voronoi_reference,output_frequency)

# Save the created objects
for index,voronoi in enumerate(voronoi_objects):

    voronoi.save(filename='results/object_{}.vti'.format(index))

